추상 클래스
	추상 메소드를 선언할 수 있는 클래스!

추상 메소드
	구현되지 않은 메소드(선언만!) 
	> public void print();
	반드시 재정의를 통해 구현을 해야 메모리에 할당되기 때문에
	'강제성!' 을 부여하기 위해 추상메소드로 선언한다.

추상 클래스 선언
	abstract class 클래스명 {
		//  일반 메소드도 선언 가능
		리턴타입 메소드명(매개변수, ...){
			실행할 문장;
		}

		abstract 리턴타입 메소드명(매개변수, ...);
	}
===============================================================
인터페이스(interface) : 틀
	주 기능: 강제성 부여
	추상 클래스를 고도화 시킨 문법
	상수, 추상 메소드만 존재한다.
	구현은 인터페이스를 지정한 클래스에서 진행하고, 인터페이스를 다른 클래스에 지정할 때는 implements 키워드 사용

추상 클래스와 인터페이스 간의 관계
	인터페이스를 일반 클래스에 지정하면 모든 메소드의 강제성이 부여되어 전부 재정의 해야 한다.
	하지만, 특수한 상황에서는 필요한 메소드만 골라서 재정의 할 수도 있다.
	인터페이스를 직접 지정하지 않고 다른 클래스에 지정한 후 바디를 만들어 놓는다면(선언만), 강제성이 소멸되고 이 클래스를 상속받아 필드를 구현한다면, 골라서 재정의 가능
	이 때 중간에서 강제성을 없애주는 클래스는 추상 클래스로 선언 이름 뒤에 "Adapter"를 붙여서 쓰임을 알려준다.
================================================================================================
다중 상속 (면접 준비 tip)
	여러 부모 클래스를 상속하는 것을 다중 상속이라고 한다.
	JAVA는 모호성 때문에 다중 상속을 지원하지 않는다.
	JDK8 인터페이스의 default 메소드 선언을 허용하고 여러 개를 지정할 수 있는 인터페이스의 특성상 다중 상속을 지원하는 것이나 다름이 없다.
	-> extends a,b 는 불가능 implements c,d는 가능

모호성(ambiguity)
	하나의 자식이 여러 부모를 상속받을 때 부모 필드에 동일한 이름의 필드가 있다면, 어떤 부모의 필드인지 알 수가 없다. -> 이를 모호성이라고 부른다.
	자바에서는 다중 상속을 지원하지 않기에 [부모 클래스와 인터페이스 / 인터페이스와 인터페이스] 간에 모호성에 대해 알아보자.

- 상황1: 두 개의 인터페이스 내에 이름과 매개변수가 똑같은 메소드가 선언되어 있다.
- 해결1: 자식에서 재정의 후 사용한다.

- 상황2: 부모 클래스의 메소드와 인터페이스의 디폴트 메소드의 이름과 매개변수가 똑같이 선언되어 있다. (우선순위는 부모가 더 높음)
- 해결2: 부모 클래스의 메소드가 호출된다.
================================================================================================
마커 인터페이스(Maker Interface)
	클래스들을 "그룹화"하기 위한 목적으로 사용한다.
	인터페이스는 지정한 클래스의 부모이며, 모든 자식은 부모의 타입으로 마커 인터페이스를 지정받은 클래스들이 하나의 타입으로 묶이게 된다.
	이름 뒤에 Marker 붙이기

내부 클래스(Inner Class)

익명 클래스(Anonymous Inner Class)

























