Casting (모든 자식은! 부모 타입)
	up casting: 자식 값을 부모 타입으로 형변환 (자식 -> 부모)
	down casting: "up casting"된 객체를 자식 타입으로 형변환 (부모 -> 자식)
	* 부모 값을 자식 타입으로 형 변환 시 오류 발생 (컴파일은 되지만 메모리 누수 오류 발생)

casting을 사용하는 이유
	모든 자식 값을 전달 받기 위해서는 동일한 타입의 저장공간으로 받아야 한다.
	하지만 자식끼리는 서로 타입이 다르기 때문에 한번에 전달받을 수가 없다.
	이 때, up casting을 사용하면 모든 자식이 부모 타입으로 하나의 저장공간에 모든 자식을 받을 수 있게 된다. (자식 클래스들은 부모 클래스들의 타입으로 덮여쓰여진다.)
	만약, up casting 으로 자식 값을 전달 받았다면 자식에게 새롭게 구현한 기능들은 사용할 수 없기 때문에 down casting을 통해 복구하고 사용한다.

객체 간 타입 비교 (instanceof)
	c instanceof Sonata : 조건식 // true or false 값을 리턴
===================================================================================
RAM
----------------
OS kernel space   : 드라이버
----------------
Stack      : 지역변수, 매개변수
----------------
Heap      : 동적 메모리
----------------
Data      : 전역변수, 정적변수(static)
----------------
BSS      : 초기화되지 않은 전역변수
----------------
Text(code)   : 상수, 코드
----------------
===================================================================================
Storage class (저장 기억 부류)
	Stack				Data
	지역변수, 매개변수			전역변수, 정적변수(static)

생명주기	} 를 만난다면(메소드가 끝난다면)		new,     프로그램이 종료 시
	메모리 해제!		
	for문 안에 선언되는 변수

	전역변수 (main함수에서 사용하는 함수)
		생성자를 통해 메모리에 할당되며, 객체가 각각 가지고 있는 변수
	
	static 변수 (정적변수)
		"컴파일러"를 통해 메모리에 1개 할당되며, 모든 객체가 공유하는 변수


접근 권한 제어자
	default	: 다른 패키지에서 접근 불가
	public	: 모든 곳에서 접근 가능, 해당 파일의 메인 클래스일 경우만 사용
	protected	: 다른 패키지에서 접근 불가, 자식은 가능
	private	: 다른 클래스에서 접근 불가, 메소드를 이용해서 접근한다.






















