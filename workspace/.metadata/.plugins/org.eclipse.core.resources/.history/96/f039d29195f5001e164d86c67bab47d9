package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import dto.AnimalDTO;
import util.DBConnection;

public class ClinicDAO {
	private Connection con;
	private PreparedStatement pstm;
	private ResultSet rs;
	
	public void insert(int animalNumber, String disease) {
	      String sql = "INSERT INTO TBL_CLINIC\r\n"
	      		+ "(CLINIC_NUMBER, ANIMAL_NUMBER, CLINIC_DISEASE, CLINIC_TIME)\r\n"
	      		+ "VALUES(SEQ_PRO.NEXTVAL, ?, ?, SYSDATE)";
	      
	      try {
	         con = DBConnection.getConnection();
	         pstm = con.prepareStatement(sql);
	         pstm.setInt(1, animalNumber);
	         pstm.setString(2, disease);
	         pstm.executeUpdate();
	         
	      } catch (SQLException e) {
	         e.printStackTrace();
	         System.out.println("ClinicDAO.insert() 도중 에러");
	      } finally {
	         try {
	            DBConnection.close(con, pstm);
	         } catch (SQLException e) {
	            e.printStackTrace();
	            System.out.println("ClinicDAO.insert() 닫는 도중 에러");
	         }
	      }
	   }
	public List<AnimalDTO> printClinic(){
	      String sql = "SELECT OWNER_NAME, T2.ANIMAL_NAME, ANIMAL_SPECIES, CLINIC_DISEASE, CLINIC_TIME FROM\r\n"
	            + "TBL_OWNER T1 JOIN\r\n"
	            + "   (SELECT ANIMAL_NAME, ANIMAL_SPECIES, CLINIC_DISEASE, OWNER_NUMBER, CLINIC_TIME  \r\n"
	            + "   FROM TBL_ANIMAL a JOIN TBL_CLINIC b\r\n"
	            + "   ON a.ANIMAL_NUMBER = b.ANIMAL_NUMBER\r\n"
	            + "   WHERE TO_CHAR(CLINIC_TIME, 'YYYYMMDD') = TO_CHAR(sysdate, 'YYYYMMDD')) T2\r\n"
	            + "ON T1.OWNER_NUMBER = T2.OWNER_NUMBER";
	      
	      List<AnimalDTO> clinics = new ArrayList<>();
	      
	      
	      try {
	         con = DBConnection.getConnection();
	         pstm = con.prepareStatement(sql);
	         rs = pstm.executeQuery();
	         
	         while(rs.next()) {
	            AnimalDTO animalDTO = new AnimalDTO();
	            animalDTO.setOwnerName(rs.getString(1));
	            animalDTO.setAnimalName(rs.getString(2));
	            animalDTO.setAnimalSpeices(rs.getString(3));
	            animalDTO.setClinicDisease(rs.getString(4));
	            animalDTO.setClinicTime(rs.getString(5));
	            
	            clinics.add(animalDTO);
	         }
	         
	      } catch (SQLException e) {
	         e.printStackTrace();
	         System.out.println("printClinic() 도중 에러");
	      } finally {
	         try {
	            DBConnection.close(con, pstm, rs);
	         } catch (SQLException e) {
	            e.printStackTrace();
	            System.out.println("printClinic() 닫는 도중 에러");
	         }
	      }
	      return clinics;
	   }
	
	// 동물을 삭제하기 전에 동물의 pk를 참조하는 진료기록의 fk를 전부 null로 수정!
	public int updateFk(int deleteAnimalNumber) {
		String sql = "UPDATE TBL_CLINIC \r\n"
				+ "SET ANIMAL_NUMBER = NULL\r\n"
				+ "WHERE ANIMAL_NUMBER = ?";
		int result = 0;
	      
	      try {
	         con = DBConnection.getConnection();
	         pstm = con.prepareStatement(sql);
	         pstm.setInt(1, deleteAnimalNumber);
	         result = pstm.executeUpdate();
	        
	         
	      } catch (SQLException e) {
	         e.printStackTrace();
	         System.out.println("updateFk() 도중 에러");
	      } finally {
	         try {
	            DBConnection.close(con, pstm);
	         } catch (SQLException e) {
	            e.printStackTrace();
	            System.out.println("updateFk() 닫는 도중 에러");
	         }
	      }
	      return result;
	}
	
	// 전체 진료기록 보기
	public List<AnimalDTO> printClinic2(){
	      String sql = "";
	      
	      List<AnimalDTO> clinics = new ArrayList<>();
	      
	      
	      try {
	         con = DBConnection.getConnection();
	         pstm = con.prepareStatement(sql);
	         rs = pstm.executeQuery();
	         
	         while(rs.next()) {
	            AnimalDTO animalDTO = new AnimalDTO();
	            animalDTO.setOwnerName(rs.getString(1));
	            animalDTO.setAnimalName(rs.getString(2));
	            animalDTO.setAnimalSpeices(rs.getString(3));
	            animalDTO.setClinicDisease(rs.getString(4));
	            animalDTO.setClinicTime(rs.getString(5));
	            
	            clinics.add(animalDTO);
	         }
	         
	      } catch (SQLException e) {
	         e.printStackTrace();
	         System.out.println("printClinic() 도중 에러");
	      } finally {
	         try {
	            DBConnection.close(con, pstm, rs);
	         } catch (SQLException e) {
	            e.printStackTrace();
	            System.out.println("printClinic() 닫는 도중 에러");
	         }
	      }
	      return clinics;
	   }
}
