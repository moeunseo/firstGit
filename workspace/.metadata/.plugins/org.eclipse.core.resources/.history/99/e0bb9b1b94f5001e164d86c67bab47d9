package controller;

import java.util.List;
import java.util.Scanner;

import dao.AnimalDAO;
import dao.ClinicDAO;
import dao.OwnerDAO;
import dto.AnimalDTO;
import vo.AnimalVO;
import vo.OwnerVO;

public class Controller {
	private Scanner sc = new Scanner(System.in);
	private OwnerDAO ownerDAO = new OwnerDAO();
	private AnimalDAO animalDAO = new AnimalDAO();
	private ClinicDAO clinicDAO = new ClinicDAO();

	// 세션 or 쿠키라고 생각하기
	private int loginUserNumber = 0;
	
	// 메인함수에서는 이 생성자만 부를 수 있다!
	public Controller() {
		play();
	}
	
	// 완벽하게 모듈화!
	private void play() {
		int choice = 0;
	      
	      while(true) {
	         System.out.println("☆☆☆☆ 은서동물병원 ☆☆☆☆");
	         System.out.println("1. 회원가입 2. 로그인 3. 프로그램 종료");
	         System.out.print("메뉴 선택 >> ");
	         choice = sc.nextInt();
	         
	         switch(choice) {
	         case 1:
	            join(); //회원가입
	            break;
	         case 2:
	        	login(); // 로그인
	            break;
	         case 3: // 프로그램 종료
	            System.out.println("프로그램 종료");
	            System.exit(0);
	            break;
	         default :
	            System.out.println("번호 확인! [1-3]\n");
	            break;
	         }
	      }
	}

	// 회원가입 메소드
	private void join() {
		String name = null;
		String phone = null;
		
		System.out.print("Name: ");
		name = sc.next();
		
		do {
			System.out.print("Phone: ");
			phone = sc.next();
		}while(!ownerDAO.checkPhone(phone)); // 여기서 중복체크!
		// true라면 회원가입 성공
		
		ownerDAO.join(name,phone);
		System.out.println(name+ "님 환영합니다.");
	}
	
	private void login(){
		String name = null;
		String phone = null;
		
		while(true) {
			System.out.print("Name: ");
			name = sc.next();
				
			System.out.print("Phone: ");
			phone = sc.next();
			
			loginUserNumber = ownerDAO.login(name, phone);
			
			// 관리자 로그인화면으로 넘어가기 위한 로그인창
			if(name.equals("관리자") && loginUserNumber !=0) {
				System.out.println("관리자님 환영합니다.");
				moveAdminPage();
				break;
			}
			else if(loginUserNumber !=0) {
				System.out.println("마이페이지 이동");
				moveMyPage(name);
				break;
			}
			else {
				System.out.println("회원가입 및 회원정보를 확인하세요!");
			}
		}
	}
	
	// 관리자 페이지 화면
	private void moveAdminPage() {
		int choice = 0;
		System.out.println("1. 오늘 진료 기록보기 2. 로그아웃");
		System.out.print
		("메뉴 선택 >> ");
		choice = sc.nextInt();
		
		while(true) {
			if(choice == 2) {
				System.out.println("관리자 로그아웃 완료!");
				loginUserNumber = 0;
				return;
			}
			
			switch (choice) {
			case 1:
				printClinic();
				break;
			default:
				System.out.println("번호 확인! [1-2]");
			}
		}
	}

	// 진료기록을 보기 위한 메소드
	private void printClinic() {
		List<AnimalDTO> clinics = clinicDAO.printClinic();
		int i = 0;
		
		for (AnimalDTO animalDTO : clinics) {
			System.out.println(++i + "번");
			printInfo(animalDTO);
		}
	}
	
	private void moveMyPage(String name) {
		int choice = 0;
		OwnerVO owner = null;
		
		while(true) {
			System.out.println("1. 내 정보 보기  2. 반려동물 추가  3. 반려동물 목록 보기  "
					+ "4. 반려동물 삭제 5. 진료기록 추가 6. 로그아웃");
			System.out.print("메뉴 선택 >> ");
			choice = sc.nextInt();
			
			if(choice == 6) {
				System.out.println(name+ "님 로그아웃 완료!");
				loginUserNumber = 0;
				return;
			}
			
			switch (choice) {
			case 1: // 내 정보보기
				owner = ownerDAO.selectOne(loginUserNumber);
				printInfo(owner);
				break;
			case 2: // 동물추가
				addAnimal();
				break;
			case 3: // 동물 리스트 보기
				selectAnimals();
				break; 
			case 4: // 동물 떠나보내기
				byeMyLove();
				break;
			case 5: // 진료기록 추가
				insertClinic();
				break;
			default:
				System.out.println("번호 확인");
			}	
		}
	}
	
	// 정보 출력 메소드
	// 이거.. 좀 이해해보자
	private void printInfo(Object obj) {
		if(obj instanceof OwnerVO) {
			OwnerVO owner = (OwnerVO)obj;
			System.out.println("이름: " + owner.getOwnerName());
			System.out.println("휴대폰 번호: " + owner.getOwnerPhone());
		}
		
		if(obj instanceof AnimalVO) {
		    AnimalVO animal = (AnimalVO) obj;
		    System.out.println("이름 : " + animal.getAnimalName());
		    System.out.println("종 : " + animal.getAnimalSpeices());
		    System.out.println("==================================");
		}
	
		if(obj instanceof AnimalDTO) {
	         AnimalDTO animal = (AnimalDTO) obj;
	         System.out.println("반려인 이름 : " + animal.getOwnerName());
		     System.out.println("이름 : " + animal.getAnimalName());
		     System.out.println("종 : " + animal.getAnimalSpeices());
		     System.out.println("병명 : " + animal.getClinicDisease());
		     System.out.println("진료시간 : " + animal.getClinicTime());
		     System.out.println("==================================");
		}
	}
	
	private void addAnimal() {
		String name = null;
		String species = null;
		
		System.out.print("동물 이름: ");
		name = sc.next();
		
		System.out.print("동물 종: ");
		species = sc.next();
		
		animalDAO.insert(name, species, loginUserNumber);
		System.out.println("추가 완료\n");
	}
	
	// 동물 리스트 보기
	  private void selectAnimals() {
	     List<AnimalVO> animals = null;
	     animals = animalDAO.selectAll(loginUserNumber);
	     int i = 0;
	     
	     for (AnimalVO animalVO : animals) {
	        System.out.println(++i + "번 동물");
	        printInfo(animalVO);
	        System.out.println();
	      }
	 }
	
	private void byeMyLove() {
		String name = null;
		int deleteAnimalNumber = 0;
		int updatedRow = 0;
		
		selectAnimals();
		System.out.print("떠나보낼 친구의 이름: ");
		
		// 이름 중복 검사도 만들어놓으면 좋겠쬬?
		// 이름 중복 검사 메소드는 매개변수 이름, 로그인 유저넘버
		name = sc.next();
		deleteAnimalNumber = animalDAO.selectOne(name, loginUserNumber);
		updatedRow = clinicDAO.updateFk(deleteAnimalNumber);
		if(updatedRow !=0) {
			System.out.println(updatedRow +"행이 변경되었습니다.");
		}
		
		animalDAO.delete(deleteAnimalNumber);
		System.out.println(name + "... 고생했어!");
		System.out.println();
	}
	
	private void insertClinic() {
		String name = null;
		String disease = null;
		selectAnimals();
		
		System.out.print("진료기록 추가할 친구 이름: ");
		name = sc.next();
		
		System.out.print("병 명: ");
		disease = sc.next();

		clinicDAO.insert(animalDAO.selectOne(name, loginUserNumber), disease);
		System.out.println("추가 완료");
	}
}